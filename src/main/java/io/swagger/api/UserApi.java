/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.7).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.User;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-09-01T10:41:34.364Z")

@Api(value = "user", description = "the user API")
public interface UserApi {

    @ApiOperation(value = "Finds users listed as living in the location; and any users who's current coordinates are within range.", nickname = "findUsersInOrNear", notes = "Finds users who are currently within a defined distance, in miles, from the supplied GPS coordinates, and users who are listed as residing in the supplied location.  GPS cordinates are in signed degrees format; Latitudes range from -90 to 90.Longitudes range from -180 to 180. Location and coordinates are assumed to, but do not have to match.   Example Data, London, Longitude -0.118072, Latitude 51.5074", response = User.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Respone", response = User.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid coordinates supplied"),
        @ApiResponse(code = 404, message = "Users not found") })
    @RequestMapping(value = "/user/findUsersInOrNear",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<User>> findUsersInOrNear(@NotNull @ApiParam(value = "longitude in signed decimal", required = true) @Valid @RequestParam(value = "longitude", required = true) Double longitude,@NotNull @ApiParam(value = "latitude in signed decimal", required = true) @Valid @RequestParam(value = "latitude", required = true) Double latitude,@NotNull @ApiParam(value = "Maximum distance from coordinates in miles. The search range.", required = true) @Valid @RequestParam(value = "distance", required = true) Double distance,@ApiParam(value = "User home location.  Example, London") @Valid @RequestParam(value = "location", required = false) String location);

}
